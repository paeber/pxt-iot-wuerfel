<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace MCP23008 {" line1="    let i2c_addr = 0x20" line2="" line3="    //% blockId=&quot;MCP_Setup&quot;" line4="    //% block=&quot;MCP Setup | Address %address | IO-Config %iodir | IO-Value: %gpio&quot;" line5="    //% advanced=false" line6="    export function setup(address: number, iodir: number, gpio: number) {" line7="        i2c_addr = address" line8="        i2c_write(MCP_Regs.IODIR, iodir)" line9="        i2c_write(MCP_Regs.GPIO, gpio)" line10="    }" line11="" line12="    //% blockId=&quot;MCP_I2C_Write&quot;" line13="    //% block=&quot;MCP I2C Write to %register Data %value&quot;" line14="    //% advanced=false" line15="    export function i2c_write(register: MCP_Regs, value: number) {" line16="        pins.i2cWriteNumber(i2c_addr, register, NumberFormat.UInt8LE, true)" line17="        pins.i2cWriteNumber(i2c_addr, value, NumberFormat.UInt8LE, false)" line18="    }" line19="" line20="" line21="    //% blockId=&quot;MCP_I2C_Read&quot;" line22="    //% block=&quot;MCP read register %register&quot;" line23="    //% advanced=false" line24="    export function i2c_read(register: MCP_Regs) {" line25="        pins.i2cWriteNumber(i2c_addr, register, NumberFormat.UInt8LE, true)" line26="        return pins.i2cReadNumber(i2c_addr, NumberFormat.UInt8LE, false)" line27="    }" line28="" line29="    //% blockId=&quot;MCP_Pin_Get&quot;" line30="    //% block=&quot;MCP Read pin %pin&quot;" line31="    //% advanced=false" line32="    export function pin_get(pin: MCP_Pins) {" line33="        let value = i2c_read(MCP_Regs.GPIO)" line34="        return (value &amp; pin)" line35="    }" line36="" line37="" line38="    //% blockId=&quot;MCP_Pin_Set&quot;" line39="    //% block=&quot;MCP set pin %pin to %value&quot;" line40="    //% advanced=false" line41="    export function pin_set(pin: MCP_Pins, value: Logic_LV) {" line42="        let pinvalue = i2c_read(MCP_Regs.GPIO)" line43="        if (value == Logic_LV.enable) {" line44="            value = (pinvalue | pin) &amp; 0xff" line45="        }" line46="        else {" line47="            value = (pinvalue &amp; (~pin)) &amp; 0xff" line48="        }" line49="        pins.i2cWriteNumber(i2c_addr, MCP_Regs.GPIO, NumberFormat.UInt8LE, true)" line50="        pins.i2cWriteNumber(i2c_addr, value, NumberFormat.UInt8LE, false)" line51="    }" line52="" line53="" line54="}" numlines="55"></mutation></block></statement></block><block type="device_forever" x="862" y="20"/></xml>