<xml xmlns="https://developers.google.com/blockly/xml"><block type="device_forever" x="10" y="10"/><block type="pxt-on-start" x="10" y="10"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace MCP23008 {" line1="    let i2c_addr = 0x20" line2="" line3="    //% blockId=&quot;MCP_I2C_Write&quot;" line4="    //% block=&quot;MCP I2C Write to %register Data %value&quot;" line5="    //% advanced=true" line6="    export function i2c_write(register: MCP_Regs, value: number) {" line7="        pins.i2cWriteNumber(i2c_addr, register, NumberFormat.UInt8LE, true)" line8="        pins.i2cWriteNumber(i2c_addr, value, NumberFormat.UInt8LE, false)" line9="    }" line10="" line11="" line12="    //% blockId=&quot;MCP_I2C_Read&quot;" line13="    //% block=&quot;MCP read register %register&quot;" line14="    //% advanced=false" line15="    export function i2c_read(register: MCP_Regs) {" line16="        pins.i2cWriteNumber(i2c_addr, register, NumberFormat.UInt8LE, true)" line17="        return pins.i2cReadNumber(i2c_addr, NumberFormat.UInt8LE, false)" line18="    }" line19="" line20="    //% blockId=&quot;MCP_Pin_Set&quot;" line21="    //% block=&quot;MCP set pin %pin to %value&quot;" line22="    //% advanced=false" line23="    export function pin_set(pin: MCP_Pins, value: number) {" line24="        let pinvalue = i2c_read(MCP_Regs.GPIO)" line25="        if (value) {" line26="            value = pinvalue | pin" line27="        }" line28="        else {" line29="            value = pinvalue &amp; ~pin" line30="        }" line31="        pins.i2cWriteNumber(i2c_addr, pin, NumberFormat.UInt8LE, true)" line32="        pins.i2cWriteNumber(i2c_addr, value, NumberFormat.UInt8LE, false)" line33="        return value" line34="    }" line35="}" numlines="36"></mutation></block></statement></block></xml>